<?php
// $Id$
/**
 * @file
 * CVS backend for Version Control API - Provides CVS commit information and
 * account management as a pluggable backend.
 *
 * Copyright 2005 by Kjartan Mannes ("Kjartan", http://drupal.org/user/2)
 * Copyright 2006, 2007 by Derek Wright ("dww", http://drupal.org/user/46549)
 * Copyright 2007 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */
// TODO: remove versioncontrol_cvs_get_{branched,tagged}_items()

// Update methods.
define('VERSIONCONTROL_CVS_UPDATE_CRON', 0);
define('VERSIONCONTROL_CVS_UPDATE_XCVS', 1);

// The admin and user edit pages.
include_once(drupal_get_path('module', 'versioncontrol_cvs') .'/versioncontrol_cvs.admin.inc');

/**
 * Implementation of hook_versioncontrol_backends().
 *
 * @return
 *   A structured array containing information about this known backends.
 *   Array key is the unique string identifier of the version control system.
 *   The corresponding array values are again structured arrays and consist
 *   of elements with the following keys:
 *
 *   'name': The user-visible name of the VCS.
 *   'description': A short description of the backend, if possible not longer
 *                  than one or two sentences.
 *   'capabilities': An array listing optional capabilities, in addition to the
 *                   required functionality like retrieval of detailed
 *                   commit information. Array values can be an arbitrary
 *                   combination of VERSIONCONTROL_CAPABILITY_* values. If no
 *                   additional capabilities are supported by the backend,
 *                   this array will be empty.
 *   'autoadd': An array listing which tables should be managed by
 *              Version Control API instead of doing it manually in
 *              the backend. Array values can be an arbitrary combination of
 *              VERSIONCONTROL_AUTOADD_* values. If no array additions
 *              should be automatically managed, this array will be empty.
 */
function versioncontrol_cvs_versioncontrol_backends() {
  return array(
    // The array key is up to 8 characters long, and used as unique identifier
    // for this VCS, in functions, URLs and in the database.
    'cvs' => array(
      // The user-visible name of the VCS.
      'name' => 'CVS',

      // A short description of the VCS, if possible not longer than one or two sentences.
      'description' => t('CVS (Concurrent Versions System) is a slightly older code management system that supports file revisions, tags and branches, but lacks atomic commits, advanced merge functionality and support for renaming items.'),

      // A list of optional capabilities, in addition to the required retrieval
      // of detailed commit information.
      'capabilities' => array(
        // Able to cancel commits if the committer lacks permissions
        // to commit to specific paths and/or branches.
        VERSIONCONTROL_CAPABILITY_COMMIT_RESTRICTIONS,
        // Able to cancel branch or tag assignments if the committer lacks
        // permissions to create/update/delete those.
        VERSIONCONTROL_CAPABILITY_BRANCH_TAG_RESTRICTIONS,
      ),

      // An array listing which tables should be managed by Version Control API
      // instead of doing it manually in the backend.
      'flags' => array(
        // versioncontrol_insert_repository() will automatically insert
        // array elements from $repository['cvs_specific'] into
        // {versioncontrol_cvs_repositories} and versioncontrol_get_repositories()
        // will automatically fetch it from there.
        VERSIONCONTROL_FLAG_AUTOADD_REPOSITORIES,
      ),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function versioncontrol_cvs_menu($may_cache) {
  global $user;
  $items = array();
  $admin_access = user_access('administer version control systems');

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/project/versioncontrol-repositories/update/cvs',
      'title' => t('Fetch log'),
      'callback' => 'versioncontrol_cvs_update_repository_callback',
      'access' => $admin_access,
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}

/**
 * Implementation of hook_cron():
 * Update repositories that have log fetching enabled.
 */
function versioncontrol_cvs_cron() {
  $result = db_query("SELECT repo_id FROM {versioncontrol_cvs_repositories}
                      WHERE update_method = %d", VERSIONCONTROL_CVS_UPDATE_CRON);

  // Set timeout limit to 3600 seconds as it can take a long time to process
  // the log initially. (And hook_cron() might be called by poormanscron.)
  if (!ini_get('safe_mode')) {
    set_time_limit(3600);
  }
  while ($repo = db_fetch_object($result)) {
    $repository = versioncontrol_get_repository($repo->repo_id);
    if (isset($repository)) {
      _versioncontrol_cvs_update_repository($repository);
    }
  }
}


/**
 * Implementation of [versioncontrol_backend]_get_commit_statistics():
 * Retrieve general statistics about what happened in a single commit. For more granular
 * details about what happened in a single commit, use versioncontrol_get_commit_actions.
 *
 * @param $commit
 *   The commit to retrieve statistics about
 *
 * @return
 *  A structured array containing general statistics about this commit. The array will consist
 *  of elements with the following keys:
 *
 *   - 'lines_added': Total number of lines added during this commit
 *   - 'lines_removed': Total number of lines removed during this commit
 *   - 'action_count': Total number of actions within this commit
 *   - 'per_action_statistics': An array containing statistics on individual actions. Array keys are
 *        the current/new paths (just as with versioncontrol_get_commit_actions). The corresponding
 *        array values are again structured arrays and consist of elements with the following keys:
 */
function versioncontrol_cvs_get_commit_statistics($commit, $commit_actions = NULL) {
  if ($commit_actions == NULL) {
    $commit_actions = versioncontrol_cvs_get_commit_actions($commit);
  }

  $total_lines_added = 0;
  $total_lines_removed = 0;
  $per_action = array();

  foreach ($commit_actions as $path => $action) {
    $per_action[$path] = array();

    $per_action[$path]['lines_added'] = $action['cvs_specific']['lines_added'];
    $total_lines_added += $per_action[$path]['lines_added'];

    $per_action[$path]['lines_removed'] = $action['cvs_specific']['lines_removed'];
    $total_lines_removed += $action['cvs_specific']['lines_removed'];
  }

  return array(
    'lines_added' => $total_lines_added,
    'lines_removed' => $total_lines_removed,
    'action_count' => count($per_action),
    'per_action_statistics' => $per_action,
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_selected_operation_item_label():
 * Retrieve the tag or branch that applied to that item during the given
 * operation. The result of this function will be used for the 'selected_label'
 * property of each item, which is necessary to provide a starting point for
 * branch and tag navigation.
 */
function versioncontrol_cvs_get_selected_operation_item_label($operation, $item) {
  // Each operation by the CVS backend has exactly one branch or tag assigned,
  // so we can just return that one for all items in any operation.
  // NOTE: That might change though, in case the CVS backend gets functionality
  //       to add branches to commits later - because when another branch is
  //       forked off, all previous commits to a file are now both in the
  //       original branch *and* in the new branch. Very low priority, though.
  return $operation['labels'][0];
}

/**
 * Implementation of [versioncontrol_backend]_get_selected_source_item_label():
 * Retrieve the tag or branch that applied to the source item of a given
 * successor item revision (a.k.a. "target item"). The result of this function
 * will be used for the 'selected_label' property of each item, which is
 * necessary to provide a starting point for branch and tag navigation.
 */
function versioncontrol_cvs_get_selected_source_item_label($repository, $successor_item, $source_item) {
  // Each source item is also available on the same branch as its successor.
  // That means we can take the label as is - if it's actually a branch.
  $label = $successor_item['selected_label'];

  if (isset($label['type']) && $label['type'] == VERSIONCONTROL_OPERATION_BRANCH) {
    return $label;
  }
  // Otherwise we can't really figure out know the successor item's branch -
  // it's a tag label array or NULL - so we either have to query CVS itself
  // (most correct solution except when invoking CVS fails for any reason),
  // or look up in the database if we know the commit associated to this item
  // revision (correct solution if the commit has been recorded and the
  // database has captured all branch/tag renames correctly). In case both
  // of those don't work, we can only return NULL - which is not really a nice
  // thing to do, as normally the CVS backend always provides a branch.
  // But that's how it goes, I guess.
  else {
    // Try 1 (more performant than process invocation):
    // Look if the database contains the associated commit.
    $constraints = array('repo_ids' => array($repository['repo_id']));
    if (isset($source_item['item_revision_id'])) {
      $constraints['item_revision_id'] = array($source_item['item_revision_id']);
    }
    else {
      $constraints['item_revisions'] = array($source_item['revision']);
      $constraints['paths'] = array($source_item['path']);
    }
    $commit_operations = versioncontrol_get_commits($constraints);

    if (!empty($commit_operations)) { // yo, found the associated commit!
      $commit_operation = reset($commit_operations); // first (only) array element
      return $commit_operation['labels'][0];
    }

    // Hm, didn't work, so...
    // Try 2: Get the information directly from the CVS process.
    // TODO: implement? or just leave it at that as "good enough"?
  }
  // No label could be retrieved by looking at the successor item, sorry.
  return NULL;
}

/**
 * Implementation of [vcs_backend]_get_parent_item():
 * Retrieve the parent (directory) item of a given item.
 *
 * @param $repository
 *   The repository that the item is located in.
 * @param $item
 *   The item whose parent should be retrieved.
 * @param $parent_path
 *   NULL if the direct parent of the given item should be retrieved,
 *   or a parent path that is further up the directory tree.
 *
 * @return
 *   The parent directory item at the same revision as the given item.
 *   If $parent_path is not set and the item is already the topmost one
 *   in the repository, the item is returned as is. It also stays the same
 *   if $parent_path is given and the same as the path of the given item.
 *   If the given directory path does not correspond to a parent item,
 *   NULL is returned.
 */
function versioncontrol_cvs_get_parent_item($repository, $item, $parent_path = NULL) {
  // Custom implementation for CVS, as directory items don't have a revision.
  if (!isset($parent_path)) {
    $item['path'] = dirname($item['path']);
    $item['revision'] = '';
    return $item;
  }
  else if (strpos($item['path'] .'/', $parent_path .'/') !== FALSE) {
    $item['path'] = $parent_path;
    $item['revision'] = '';
    return $item;
  }
  return NULL;
}


/**
 * CVS tells us that the file was modified (has a previous revision) even if
 * it has been deleted before. Technically that's correct, but we'd like to
 * have it show up as "added", so this function tries to be smart and alters
 * a commit actions array accordingly if the database tells us that the
 * previous revision of a file was dead.
 */
function _versioncontrol_cvs_fix_commit_actions($commit, &$commit_actions) {
  foreach ($commit_actions as $path => $action) {
    if ($action['action'] != VERSIONCONTROL_ACTION_MODIFIED) {
      continue;
    }
    $repo_id = isset($commit['repository'])
               ? $commit['repository']['repo_id']
               : $commit['repo_id'];
    $count = db_result(db_query(
      "SELECT COUNT(*)
        FROM {versioncontrol_cvs_item_revisions} ir
          INNER JOIN {versioncontrol_operations} op
            ON ir.vc_op_id = op.vc_op_id
        WHERE op.repo_id = %d AND op.type = %d
          AND ir.type = %d AND ir.path = '%s' AND ir.revision = '%s'",
      $repo_id, VERSIONCONTROL_OPERATION_COMMIT,
      VERSIONCONTROL_ITEM_FILE_DELETED, $path,
      $action['source items'][0]['revision']
    ));
    if ($count > 0) {
      $commit_actions[$path]['action'] = VERSIONCONTROL_ACTION_ADDED;
      unset($commit_actions[$path]['source items']);
    }
  }
}

/**
 * Implementation of [versioncontrol_backend]_operation():
 * Manage (insert or delete) additional commit/tag/branch data in the database.
 */
function versioncontrol_cvs_operation($op, $operation, $operation_items) {
  if ($operation['type'] == VERSIONCONTROL_OPERATION_COMMIT) {
    switch ($op) {
      case 'insert':
        foreach ($operation_items as $path => $item) {
          db_query(
            "INSERT INTO {versioncontrol_cvs_item_revisions}
            (item_revision_id, lines_added, lines_removed)
            VALUES (%d, %d, %d)",
            $item['item_revision_id'], $operation['vc_op_id'],
            $item['cvs_specific']['lines_added'], $item['cvs_specific']['lines_removed']
          );
        }
        break;

      case 'delete':
        $result = db_query('SELECT item_revision_id
                            FROM {versioncontrol_operation_items}
                            WHERE vc_op_id = %d', $operation['vc_op_id']);

        while ($item_revision_id = db_result($result)) {
          db_query('DELETE FROM {versioncontrol_cvs_item_revisions}
                    WHERE item_revision_id = %d', $item_revision_id);
        }
        break;
    }
  }
}

/**
 * Implementation of [versioncontrol_backend]_account():
 * Manage (insert, update or delete) additional CVS user account data
 * in the database.
 *
 * @param $op
 *   Either 'insert' when the account is in the process of being created,
 *   or 'update' when username or additional module data change,
 *   or 'delete' if it will be deleted after this function has been called.
 * @param $uid
 *   The Drupal user id corresponding to the VCS account.
 * @param $username
 *   The VCS specific username (a string).
 * @param $repository
 *   The repository where the user has its VCS account.
 * @param $additional_data
 *   An array of additional author information.
 */
function versioncontrol_cvs_account($op, $uid, $username, $repository, $additional_data = array()) {
  $cvs_specific = $additional_data['cvs_specific'];

  switch ($op) {
    case 'insert':
      if (!isset($cvs_specific) || !isset($cvs_specific['password'])) {
        drupal_set_message(t('Error: no CVS password given on account creation!'), 'error');
        return;
      }
      db_query("INSERT INTO {versioncontrol_cvs_accounts}
                (uid, repo_id, password)
                VALUES (%d, %d, '%s')",
                $uid, $repository['repo_id'], $cvs_specific['password']);
      break;

    case 'update':
      if (!isset($cvs_specific) || !isset($cvs_specific['password'])) {
        return; // the user didn't update the password in the process.
      }
      db_query("UPDATE {versioncontrol_cvs_accounts}
                SET password = '%s'
                WHERE uid = %d AND repo_id = %d",
                $cvs_specific['password'], $uid, $repository['repo_id']);

      if (!user_access('administer version control systems')) {
        // Admins get "The account has been updated successfully" anyways.
        drupal_set_message(t('The CVS password has been updated successfully.'));
      }
      break;

    case 'delete':
      db_query('DELETE FROM {versioncontrol_cvs_accounts}
                WHERE uid = %d AND repo_id = %d',
                $uid, $repository['repo_id']);
      break;
  }
}

/**
 * Implementation of [vcs_backend]_import_accounts():
 * Import accounts into a repository, given text data from the accounts file.
 * No accounts are deleted, new accounts are inserted, and existing accounts
 * are updated with imported ones.
 *
 * @param $repository
 *   The repository where the accounts will be imported.
 * @param $data
 *   The contents of the "account data" text area where the user has to
 *   enter/copy the contents of the version control system's accounts file.
 */
function versioncontrol_cvs_import_accounts($repository, $data) {
  $lines = explode("\n", $data);
  $names = array();

  foreach ($lines as $line) {
    if (preg_match('/^\s*(#.*)?$/', $line)) { // filter out empty and commented lines
      continue;
    }
    // Extract the account information and create or update the user accounts.
    list($username, $password, $run_as_user) = explode(':', $line);
    if (!empty($username) && !empty($password)) {
      $additional_data = array(
        'cvs_specific' => array('password' => $password),
      );
      $uid = versioncontrol_get_account_uid_for_username($repository['repo_id'], $username, TRUE);

      if (isset($uid)) {
        versioncontrol_update_account($repository, $uid, $username, $additional_data);
        $names[] = t('updated !username', array('!username' => $username));
      }
      else {
        $uid = db_result(db_query("SELECT uid FROM {users} WHERE name = '%s'", $username));
        if ($uid) {
          versioncontrol_insert_account($repository, $uid, $username, $additional_data);
          $names[] = t('added !username', array('!username' => $username));
        }
        else {
          $names[] = t('didn\'t add !username (no matching Drupal username exists)',
                       array('!username' => $username));
        }
      }
    }
  }

  if (empty($names)) {
    drupal_set_message(t('Failed to import CVS accounts.'), 'error');
  }
  else {
    drupal_set_message(theme('item_list', $names, t('The import of CVS accounts has been completed successfully:')));
  }
}

/**
 * Implementation of [vcs_backend]_export_accounts():
 * Export accounts of a repository to text data that is suitable for
 * copying to the version control system's accounts file.
 *
 * @param $repository
 *   The repository whose accounts will be exported.
 * @param $accounts
 *   The list (array) of accounts that should be exported, given in the same
 *   format as the return value of versioncontrol_get_accounts().
 *   All accounts in this list are from the above repository.
 *
 * @return
 *   The exported textual representation of the account list.
 */
function versioncontrol_cvs_export_accounts($repository, $accounts) {
  if (empty($accounts)) {
    return '# '. t('no user accounts available to export');
  }

  $accounts_flat = array();
  $uid_constraints = array();
  $params = array($repository['repo_id']);

  foreach ($accounts as $uid => $usernames_per_repository) {
    foreach ($usernames_per_repository as $repo_id => $username) {
      $accounts_flat[$uid] = array('uid' => $uid, 'username' => $username);
      $uid_constraints[] = 'uid = %d';
      $params[] = $uid;
    }
  }

  $result = db_query('SELECT uid, password FROM {versioncontrol_cvs_accounts}
                      WHERE repo_id = %d
                       AND ('. implode(' OR ', $uid_constraints) .')',
                      $params);
  while ($account = db_fetch_object($result)) {
    $accounts_flat[$account->uid]['password'] = $account->password;
  }

  $run_as_user = '';
  if (!empty($repository['run_as_user'])) {
    $run_as_user = ':'. $repository['run_as_user'];
  }
  $data = '';
  foreach ($accounts_flat as $uid => $account) {
    $data .= '# '. url('user/'. $uid, NULL, NULL, TRUE) ."\n";
    $data .= $account['username'] .':'. $account['password'] . $run_as_user ."\n\n";
  }
  return $data;
}


/**
 * Menu callback for 'admin/project/versioncontrol-repositories/update/cvs'
 * (expecting a $repo_id as one more path argument):
 * Retrieve/validate the specified repository, fetch new commits, tags
 * and branches by invoking the cvs executable, output messages and
 * redirect back to the repository page.
 */
function versioncontrol_cvs_update_repository_callback($repo_id) {
  if (is_numeric($repo_id)) {
    $repository = versioncontrol_get_repository($repo_id);

    if (isset($repository)) {
      $update_method = $repository['cvs_specific']['update_method'];
    }
  }
  if (isset($update_method) && $update_method == VERSIONCONTROL_CVS_UPDATE_CRON) {
    // Set timeout limit to 3600 seconds as it can take a long time
    // to process the log initially.
    if (!ini_get('safe_mode')) {
      set_time_limit(3600);
    }
    if (_versioncontrol_cvs_update_repository($repository)) {
      drupal_set_message(t('Fetched new log entries.'));
    }
  }
  else { // $repo_id is not a number or doesn't correlate to any repository.
    drupal_set_message(t('No such repository, did not fetch anything.'));
  }
  drupal_goto('admin/project/versioncontrol-repositories');
}

/**
 * Actually update the repository by fetching commits and other stuff
 * directly from the repository, invoking the cvs executable.
 *
 * @return
 *   TRUE if the logs were updated, or FALSE if fetching and updating the logs
 *   failed for whatever reason.
 */
function _versioncontrol_cvs_update_repository(&$repository) {
  include_once(drupal_get_path('module', 'versioncontrol_cvs') .'/versioncontrol_cvs.log.inc');
  return _versioncontrol_cvs_log_update_repository($repository);
}

/**
 * Calculate the previous revision number of file under version control,
 * given the current revision. This can be done in a purely programmatical way
 * because of the quite special numbering scheme of CVS (so no database queries
 * need to be done in order to get the result).
 *
 * @return
 *   The previous revision number (e.g. "1.1" for a given "1.2",
 *   or "1.3" for a given "1.3.2.1"), or NULL if $current_revision is "1.1"
 *   (which obviously means that there is no previous revision number).
 */
function versioncontrol_cvs_get_previous_revision_number($current_revision) {
  if ($current_revision === '1.1') {
    return NULL;
  }
  $parts = explode('.', $current_revision);
  $last_part = array_pop($parts);

  // For the first commit to a new branch, cut off the two rightmost parts
  // in order to get the previous revision number. (e.g. "1.3.4.1" is the
  // first commit on branch 1.3.0.4 which originated in "1.3" from HEAD.)
  if ($last_part === '1') {
    array_pop($parts); // e.g., removes the "2" from the example above
    return implode('.', $parts);
  }

  // If we don't have a "1" as last part, we can just decrease this by one
  // and implode it again to get the previous revision.
  $last_part = ((int) $last_part) - 1;
  $parts[] = (string) $last_part;
  return implode('.', $parts);
}
